/* Copyright 2018 Pedro Cuadra - pjcuadra@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* WARNING: This file is automatically generated by raml2agl */
extern "C"
{
   #define AFB_BINDING_VERSION 2
   #include <afb/afb-binding.h>
};


#include <cstddef>
#include <cstdio>
#include <cstring>

#include <json-c/json.h>

#include <service/ServiceRoverBuzzer.h>
// #include <all_types.h>

static ServiceRoverBuzzer obj;

static int init()
{
  int rc = 0;
	AFB_NOTICE("Initializing... ");
  rc = obj.init();
	AFB_NOTICE("Initialization done!");
	return rc;
}

static void get_frequency(struct afb_req request) {
  json_object *args = afb_req_json(request);
  int _var_buzzer_frequency = static_cast<int>(0);
  json_object * new_json = json_object_new_object();
  json_object * new_sub_json = NULL;
  int ret = 0;

  AFB_NOTICE("[roverbuzzer] Calling get_frequency");


  if (args) {
    // Parse args if possible


  }


  ret = obj.get_frequency(_var_buzzer_frequency);
  if (ret) {
    AFB_ERROR("[roverbuzzer] Verb 'get_frequency' returning error");
    afb_req_fail_f(request, "bad-request", "Verb 'get_frequency' returning error %d", ret);
    return;
  }


  new_sub_json = json_object_new_int(_var_buzzer_frequency);
  json_object_object_add(new_json, "buzzer_frequency", new_sub_json);

  afb_req_success(request, new_json, NULL);
  // Release the request json object
  json_object_put(new_json);

}

static void set_frequency(struct afb_req request) {
  json_object *args = afb_req_json(request);
  json_object *val[1];
  int ret = 0;

  AFB_NOTICE("[roverbuzzer] Calling set_frequency");


  if (args) {
    // Parse args if possible
    if (!json_object_object_get_ex(args, "buzzer_frequency", &val[0])) {
      AFB_ERROR("[roverbuzzer] No 'buzzer_frequency' param provided");
      afb_req_fail(request, "bad-request", "No 'buzzer_frequency' param provided");
      return;
    }


  }


  ret = obj.set_frequency(static_cast<int>(json_object_get_int(val[0])));
  if (ret) {
    AFB_ERROR("[roverbuzzer] Verb 'set_frequency' returning error");
    afb_req_fail_f(request, "bad-request", "Verb 'set_frequency' returning error %d", ret);
    return;
  }



  afb_req_success(request, args, NULL);

}

static void set_off(struct afb_req request) {
  json_object *args = afb_req_json(request);
  int ret = 0;

  AFB_NOTICE("[roverbuzzer] Calling set_off");


  if (args) {
    // Parse args if possible


  }


  ret = obj.set_off();
  if (ret) {
    AFB_ERROR("[roverbuzzer] Verb 'set_off' returning error");
    afb_req_fail_f(request, "bad-request", "Verb 'set_off' returning error %d", ret);
    return;
  }



  afb_req_success(request, args, NULL);

}

static void play_melody(struct afb_req request) {
  json_object *args = afb_req_json(request);
  json_object *val[2];
  json_object *val_melody_size_obj = NULL;
  int _var_melody_size = 0;
  int * _var_melody = nullptr;
  json_object *val_tempo_size_obj = NULL;
  int _var_tempo_size = 0;
  double * _var_tempo = nullptr;
  int ret = 0;

  AFB_NOTICE("[roverbuzzer] Calling play_melody");


  if (args) {
    // Parse args if possible
    if (!json_object_object_get_ex(args, "melody", &val[0])) {
      AFB_ERROR("[roverbuzzer] No 'melody' param provided");
      afb_req_fail(request, "bad-request", "No 'melody' param provided");
      return;
    }
    if (!json_object_object_get_ex(args, "melody_size", &val_melody_size_obj)) {
      AFB_ERROR("[roverbuzzer] No 'melody_size' param provided");
      afb_req_fail(request, "bad-request", "No 'melody_size' param provided");
      return;
    }

    _var_melody_size = json_object_get_int(val_melody_size_obj);

    _var_melody = new int[_var_melody_size];

    for (int i = 0; i < _var_melody_size; i++) {
      _var_melody[i] = static_cast<int>(json_object_get_int(json_object_array_get_idx(val[0], i)));
    }

    if (!json_object_object_get_ex(args, "tempo", &val[1])) {
      AFB_ERROR("[roverbuzzer] No 'tempo' param provided");
      afb_req_fail(request, "bad-request", "No 'tempo' param provided");
      return;
    }
    if (!json_object_object_get_ex(args, "tempo_size", &val_tempo_size_obj)) {
      AFB_ERROR("[roverbuzzer] No 'tempo_size' param provided");
      afb_req_fail(request, "bad-request", "No 'tempo_size' param provided");
      return;
    }

    _var_tempo_size = json_object_get_int(val_tempo_size_obj);

    _var_tempo = new double[_var_tempo_size];

    for (int i = 0; i < _var_tempo_size; i++) {
      _var_tempo[i] = static_cast<double>(json_object_get_double(json_object_array_get_idx(val[1], i)));
    }



  }


  ret = obj.play_melody(_var_melody, _var_melody_size,
      _var_tempo, _var_tempo_size);
  if (ret) {
    AFB_ERROR("[roverbuzzer] Verb 'play_melody' returning error");
    afb_req_fail_f(request, "bad-request", "Verb 'play_melody' returning error %d", ret);
    return;
  }

  delete [] _var_melody;
  delete [] _var_tempo;


  afb_req_success(request, args, NULL);

}

static void set_tone(struct afb_req request) {
  json_object *args = afb_req_json(request);
  json_object *val[1];
  int ret = 0;

  AFB_NOTICE("[roverbuzzer] Calling set_tone");


  if (args) {
    // Parse args if possible
    if (!json_object_object_get_ex(args, "buzzer_frequency", &val[0])) {
      AFB_ERROR("[roverbuzzer] No 'buzzer_frequency' param provided");
      afb_req_fail(request, "bad-request", "No 'buzzer_frequency' param provided");
      return;
    }


  }


  ret = obj.set_tone(static_cast<int>(json_object_get_int(val[0])));
  if (ret) {
    AFB_ERROR("[roverbuzzer] Verb 'set_tone' returning error");
    afb_req_fail_f(request, "bad-request", "Verb 'set_tone' returning error %d", ret);
    return;
  }



  afb_req_success(request, args, NULL);

}

static void set_on(struct afb_req request) {
  json_object *args = afb_req_json(request);
  int ret = 0;

  AFB_NOTICE("[roverbuzzer] Calling set_on");


  if (args) {
    // Parse args if possible


  }


  ret = obj.set_on();
  if (ret) {
    AFB_ERROR("[roverbuzzer] Verb 'set_on' returning error");
    afb_req_fail_f(request, "bad-request", "Verb 'set_on' returning error %d", ret);
    return;
  }



  afb_req_success(request, args, NULL);

}


// static const struct afb_auth _afb_auths_v2_monitor[] = {
// 	{type : afb_auth_Permission, text : "urn:AGL:permission:monitor:public:set"},
// 	{type : afb_auth_Permission, text : "urn:AGL:permission:monitor:public:get"},
// 	{type : afb_auth_Or, first : &_afb_auths_v2_monitor[1], next : &_afb_auths_v2_monitor[0]}
// };

static const struct afb_verb_v2 verbs[] = {
  /*Without security*/
  {.verb = "get_frequency", .callback = get_frequency, .auth = NULL, .info = "Get the Buzzer Frequency", .session = 0},
  {.verb = "set_frequency", .callback = set_frequency, .auth = NULL, .info = "Set the Buzzer Frequency", .session = 0},
  {.verb = "set_off", .callback = set_off, .auth = NULL, .info = "Set the Buzzer Off", .session = 0},
  {.verb = "play_melody", .callback = play_melody, .auth = NULL, .info = "Play Melody", .session = 0},
  {.verb = "set_tone", .callback = set_tone, .auth = NULL, .info = "Set the Buzzer Tone", .session = 0},
  {.verb = "set_on", .callback = set_on, .auth = NULL, .info = "Set the Buzzer On", .session = 0},
  {.verb= NULL, .callback=NULL, .auth = NULL, .info = NULL, .session = 0 }
};

const struct afb_binding_v2 afbBindingV2 = {
  .api = "roverbuzzer",
  .specification = "",
  .info = "Auto generated - Rover Buzzer",
  .verbs = verbs,
  .preinit = NULL,
  .init = init,
  .onevent = NULL,
  .noconcurrency = 1
};