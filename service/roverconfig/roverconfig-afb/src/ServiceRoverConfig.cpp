/* Copyright 2018 Pedro Cuadra - pjcuadra@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* WARNING: This file is automatically generated by raml2agl */
#include <service/ServiceRoverConfig.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <json-c/json.h>

static struct json_object * config = nullptr;

ServiceRoverConfig::ServiceRoverConfig() {
  AFB_NOTICE("[ServiceRoverConfig] Constructor ");
}

int get_file_contents(const char* filename, char** outbuffer) {
  FILE* file = NULL;
  long filesize;
  const int blocksize = 1;
  size_t readsize;
  char* filebuffer;

  // Open the file
  file = fopen(filename, "r");
  if (NULL == file)
  {
    AFB_ERROR("'%s' not opened\n", filename);
  }

  // Determine the file size
  fseek(file, 0, SEEK_END);
  filesize = ftell(file);
  rewind (file);

  // Allocate memory for the file contents
  filebuffer = (char*) malloc(sizeof(char) * filesize);
  *outbuffer = filebuffer;
  if (filebuffer == NULL)
  {
    AFB_ERROR("malloc out-of-memory");
  }

  // Read in the file
  readsize = fread(filebuffer, blocksize, filesize, file);
  if (readsize != filesize)
  {
    AFB_ERROR("didn't read file completely");
  }

  // Clean exit
  fclose(file);
  return EXIT_SUCCESS;
}

int ServiceRoverConfig::init() {
  char* buffer = NULL;
  int rc = 0;
  const char filepath[] = "/etc/rover.conf";
  AFB_NOTICE("[ServiceRoverConfig] Init ");

  rc = get_file_contents(filepath, &buffer);
  if (rc) {
    return rc;
  }

  /* parse the json into a json_object struct */
  config = json_tokener_parse(buffer);

  return 0;
}


/** Autogenrated doc for get */
int ServiceRoverConfig::get(const std::string in_key,
    std::string &out_value) {
  json_object * val = nullptr;
  json_bool rb;
  AFB_NOTICE("[ServiceRoverConfig] Get");

  rb = json_object_object_get_ex(config, in_key.c_str(), &val);
  if (!rb) {
    AFB_WARNING("[ServiceRoverConfig] Get - Config %s not found", in_key);
    return -1;
  }

  out_value = json_object_get_string(val);

  return 0;
}
