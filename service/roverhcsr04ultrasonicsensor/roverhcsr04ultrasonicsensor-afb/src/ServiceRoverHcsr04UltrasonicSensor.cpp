/* Copyright 2018 Pedro Cuadra - pjcuadra@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* WARNING: This file is automatically generated by raml2agl */
#include <service/ServiceRoverHcsr04UltrasonicSensor.h>
#include <roverapi/rover_hcsr04.hpp>
#include <roverapi/rover_api.hpp>

using namespace rover;

static RoverHCSR04 rearSensor(static_cast<RoverSensorID_t>(rover_sensor_id::rear));
static RoverHCSR04 frontSensor(static_cast<RoverSensorID_t>(rover_sensor_id::front));
static RoverBase base;

inline RoverHCSR04 getSensor(const rover_sensor_id id) {
  switch (id) {
    case rear:
      return rearSensor;
    case front:
      return frontSensor;
    default:
      return frontSensor; // Note that the id is check in every function
  }
}

inline bool check_id(const rover_sensor_id id) {
  switch (id) {
    case rear:
    case front:
      return true;
    default:
      return false;
  }
}

ServiceRoverHcsr04UltrasonicSensor::ServiceRoverHcsr04UltrasonicSensor() {
  AFB_NOTICE("[ServiceRoverHcsr04UltrasonicSensor] Constructor ");
}

int ServiceRoverHcsr04UltrasonicSensor::init() {
  AFB_NOTICE("[ServiceRoverHcsr04UltrasonicSensor] Init ");

  base.initialize();

  rearSensor.initialize();
  frontSensor.initialize();

  return 0;
}


/** Autogenrated doc for check */
int ServiceRoverHcsr04UltrasonicSensor::check(const rover_sensor_id in_sensor_id,
    bool &out_enable) {
  AFB_NOTICE("[ServiceRoverHcsr04UltrasonicSensor] Check");

  RoverHCSR04 sensor = getSensor(in_sensor_id);

  if (!check_id(in_sensor_id)) {
    return -1;
  }


  // TODO: Implement this checking
  out_enable = true;

  return 0;
}

/** Autogenrated doc for get_echo_pin */
int ServiceRoverHcsr04UltrasonicSensor::get_echo_pin(const rover_sensor_id in_sensor_id,
    int &out_echo_pin) {
  AFB_NOTICE("[ServiceRoverHcsr04UltrasonicSensor] Get_echo_pin");

  RoverHCSR04 sensor = getSensor(in_sensor_id);

  if (!check_id(in_sensor_id)) {
    return -1;
  }

  out_echo_pin = sensor.getEchoPin();

  return 0;
}

/** Autogenrated doc for get_trig_pin */
int ServiceRoverHcsr04UltrasonicSensor::get_trig_pin(const rover_sensor_id in_sensor_id,
    int &out_trig_pin) {
  AFB_NOTICE("[ServiceRoverHcsr04UltrasonicSensor] Get_trig_pin");
  RoverHCSR04 sensor = getSensor(in_sensor_id);

  if (!check_id(in_sensor_id)) {
    return -1;
  }

  out_trig_pin = sensor.getTrigPin();

  return 0;
}

/** Autogenrated doc for read */
int ServiceRoverHcsr04UltrasonicSensor::read(const rover_sensor_id in_sensor_id,
    double &out_distance) {
  AFB_NOTICE("[ServiceRoverHcsr04UltrasonicSensor] Read");
  RoverHCSR04 sensor = getSensor(in_sensor_id);

  if (!check_id(in_sensor_id)) {
    return -1;
  }

  out_distance = sensor.read();

  return 0;
}

/** Autogenrated doc for set_echo_pin */
int ServiceRoverHcsr04UltrasonicSensor::set_echo_pin(const rover_sensor_id in_sensor_id,
    const int in_echo_pin) {
  AFB_NOTICE("[ServiceRoverHcsr04UltrasonicSensor] Set_echo_pin");
  RoverHCSR04 sensor = getSensor(in_sensor_id);

  if (!check_id(in_sensor_id)) {
    return -1;
  }

  sensor.setEchoPin(in_echo_pin);

  return 0;
}

/** Autogenrated doc for set_trig_pin */
int ServiceRoverHcsr04UltrasonicSensor::set_trig_pin(const rover_sensor_id in_sensor_id,
    const int in_trig_pin) {
  AFB_NOTICE("[ServiceRoverHcsr04UltrasonicSensor] Set_trig_pin");
  RoverHCSR04 sensor = getSensor(in_sensor_id);

  if (!check_id(in_sensor_id)) {
    return -1;
  }

  sensor.setTrigPin(in_trig_pin);

  return 0;
}
