/* Copyright 2018 Pedro Cuadra - pjcuadra@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* WARNING: This file is automatically generated by raml2agl */
extern "C"
{
   #define AFB_BINDING_VERSION 2
   #include <afb/afb-binding.h>
};


#include <cstddef>
#include <cstdio>
#include <cstring>

#include <json-c/json.h>

#include <service/ServiceRoverQmc5883L.h>
// #include <all_types.h>

static ServiceRoverQmc5883L obj;

static int init()
{
  int rc = 0;
	AFB_NOTICE("Initializing... ");
  rc = obj.init();
	AFB_NOTICE("Initialization done!");
	return rc;
}

static void set_address(struct afb_req request) {
  json_object *args = afb_req_json(request);
  json_object *val[1];
  int ret = 0;

  AFB_NOTICE("[roverqmc5883l] Calling set_address");


  if (args) {
    // Parse args if possible
    if (!json_object_object_get_ex(args, "address", &val[0])) {
      AFB_ERROR("[roverqmc5883l] No 'address' param provided");
      afb_req_fail(request, "bad-request", "No 'address' param provided");
      return;
    }


  }


  ret = obj.set_address(static_cast<int>(json_object_get_int(val[0])));
  if (ret) {
    AFB_ERROR("[roverqmc5883l] Verb 'set_address' returning error");
    afb_req_fail_f(request, "bad-request", "Verb 'set_address' returning error %d", ret);
    return;
  }



  afb_req_success(request, args, NULL);

}

static void set_declination_angle(struct afb_req request) {
  json_object *args = afb_req_json(request);
  json_object *val[1];
  int ret = 0;

  AFB_NOTICE("[roverqmc5883l] Calling set_declination_angle");


  if (args) {
    // Parse args if possible
    if (!json_object_object_get_ex(args, "angle", &val[0])) {
      AFB_ERROR("[roverqmc5883l] No 'angle' param provided");
      afb_req_fail(request, "bad-request", "No 'angle' param provided");
      return;
    }


  }


  ret = obj.set_declination_angle(static_cast<double>(json_object_get_double(val[0])));
  if (ret) {
    AFB_ERROR("[roverqmc5883l] Verb 'set_declination_angle' returning error");
    afb_req_fail_f(request, "bad-request", "Verb 'set_declination_angle' returning error %d", ret);
    return;
  }



  afb_req_success(request, args, NULL);

}

static void get_address(struct afb_req request) {
  json_object *args = afb_req_json(request);
  int _var_address = static_cast<int>(0);
  json_object * new_json = json_object_new_object();
  json_object * new_sub_json = NULL;
  int ret = 0;

  AFB_NOTICE("[roverqmc5883l] Calling get_address");


  if (args) {
    // Parse args if possible


  }


  ret = obj.get_address(_var_address);
  if (ret) {
    AFB_ERROR("[roverqmc5883l] Verb 'get_address' returning error");
    afb_req_fail_f(request, "bad-request", "Verb 'get_address' returning error %d", ret);
    return;
  }


  new_sub_json = json_object_new_int(_var_address);
  json_object_object_add(new_json, "address", new_sub_json);

  afb_req_success(request, new_json, NULL);
  // Release the request json object
  json_object_put(new_json);

}

static void read(struct afb_req request) {
  json_object *args = afb_req_json(request);
  double _var_bearing_value = static_cast<double>(0);
  json_object * new_json = json_object_new_object();
  json_object * new_sub_json = NULL;
  int ret = 0;

  AFB_NOTICE("[roverqmc5883l] Calling read");


  if (args) {
    // Parse args if possible


  }


  ret = obj.read(_var_bearing_value);
  if (ret) {
    AFB_ERROR("[roverqmc5883l] Verb 'read' returning error");
    afb_req_fail_f(request, "bad-request", "Verb 'read' returning error %d", ret);
    return;
  }


  new_sub_json = json_object_new_double(_var_bearing_value);
  json_object_object_add(new_json, "bearing_value", new_sub_json);

  afb_req_success(request, new_json, NULL);
  // Release the request json object
  json_object_put(new_json);

}

static void get_declination_angle(struct afb_req request) {
  json_object *args = afb_req_json(request);
  double _var_angle = static_cast<double>(0);
  json_object * new_json = json_object_new_object();
  json_object * new_sub_json = NULL;
  int ret = 0;

  AFB_NOTICE("[roverqmc5883l] Calling get_declination_angle");


  if (args) {
    // Parse args if possible


  }


  ret = obj.get_declination_angle(_var_angle);
  if (ret) {
    AFB_ERROR("[roverqmc5883l] Verb 'get_declination_angle' returning error");
    afb_req_fail_f(request, "bad-request", "Verb 'get_declination_angle' returning error %d", ret);
    return;
  }


  new_sub_json = json_object_new_double(_var_angle);
  json_object_object_add(new_json, "angle", new_sub_json);

  afb_req_success(request, new_json, NULL);
  // Release the request json object
  json_object_put(new_json);

}

static void calibrate(struct afb_req request) {
  json_object *args = afb_req_json(request);
  int ret = 0;

  AFB_NOTICE("[roverqmc5883l] Calling calibrate");


  if (args) {
    // Parse args if possible


  }


  ret = obj.calibrate();
  if (ret) {
    AFB_ERROR("[roverqmc5883l] Verb 'calibrate' returning error");
    afb_req_fail_f(request, "bad-request", "Verb 'calibrate' returning error %d", ret);
    return;
  }



  afb_req_success(request, args, NULL);

}

static void get_calibration_period(struct afb_req request) {
  json_object *args = afb_req_json(request);
  int _var_period = static_cast<int>(0);
  json_object * new_json = json_object_new_object();
  json_object * new_sub_json = NULL;
  int ret = 0;

  AFB_NOTICE("[roverqmc5883l] Calling get_calibration_period");


  if (args) {
    // Parse args if possible


  }


  ret = obj.get_calibration_period(_var_period);
  if (ret) {
    AFB_ERROR("[roverqmc5883l] Verb 'get_calibration_period' returning error");
    afb_req_fail_f(request, "bad-request", "Verb 'get_calibration_period' returning error %d", ret);
    return;
  }


  new_sub_json = json_object_new_int(_var_period);
  json_object_object_add(new_json, "period", new_sub_json);

  afb_req_success(request, new_json, NULL);
  // Release the request json object
  json_object_put(new_json);

}

static void set_calibration_period(struct afb_req request) {
  json_object *args = afb_req_json(request);
  json_object *val[1];
  int ret = 0;

  AFB_NOTICE("[roverqmc5883l] Calling set_calibration_period");


  if (args) {
    // Parse args if possible
    if (!json_object_object_get_ex(args, "period", &val[0])) {
      AFB_ERROR("[roverqmc5883l] No 'period' param provided");
      afb_req_fail(request, "bad-request", "No 'period' param provided");
      return;
    }


  }


  ret = obj.set_calibration_period(static_cast<int>(json_object_get_int(val[0])));
  if (ret) {
    AFB_ERROR("[roverqmc5883l] Verb 'set_calibration_period' returning error");
    afb_req_fail_f(request, "bad-request", "Verb 'set_calibration_period' returning error %d", ret);
    return;
  }



  afb_req_success(request, args, NULL);

}


// static const struct afb_auth _afb_auths_v2_monitor[] = {
// 	{type : afb_auth_Permission, text : "urn:AGL:permission:monitor:public:set"},
// 	{type : afb_auth_Permission, text : "urn:AGL:permission:monitor:public:get"},
// 	{type : afb_auth_Or, first : &_afb_auths_v2_monitor[1], next : &_afb_auths_v2_monitor[0]}
// };

static const struct afb_verb_v2 verbs[] = {
  /*Without security*/
  {.verb = "set_address", .callback = set_address, .auth = NULL, .info = "Sets the QMC5883L Address", .session = 0},
  {.verb = "set_declination_angle", .callback = set_declination_angle, .auth = NULL, .info = "Set the declination angle", .session = 0},
  {.verb = "get_address", .callback = get_address, .auth = NULL, .info = "Get the QMC5883L Address", .session = 0},
  {.verb = "read", .callback = read, .auth = NULL, .info = "Read the bearing value from Bearing sensor Sunfounder QMC5883L", .session = 0},
  {.verb = "get_declination_angle", .callback = get_declination_angle, .auth = NULL, .info = "Get the declination angle", .session = 0},
  {.verb = "calibrate", .callback = calibrate, .auth = NULL, .info = "Starts calibration for the bearing sensor", .session = 0},
  {.verb = "get_calibration_period", .callback = get_calibration_period, .auth = NULL, .info = "Get the calibration period", .session = 0},
  {.verb = "set_calibration_period", .callback = set_calibration_period, .auth = NULL, .info = "Set the calibration period", .session = 0},
  {.verb= NULL, .callback=NULL, .auth = NULL, .info = NULL, .session = 0 }
};

const struct afb_binding_v2 afbBindingV2 = {
  .api = "roverqmc5883l",
  .specification = "",
  .info = "Auto generated - Rover Qmc5883L",
  .verbs = verbs,
  .preinit = NULL,
  .init = init,
  .onevent = NULL,
  .noconcurrency = 1
};