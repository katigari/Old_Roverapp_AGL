/* Copyright 2018 Pedro Cuadra - pjcuadra@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* WARNING: This file is automatically generated by raml2agl */
#include <service/ServiceRoverMarkerDetect.h>

#include <opencv2/highgui.hpp>
#include <opencv2/aruco.hpp>
#include <raspicam/raspicam_cv.h>

using namespace std;
using namespace cv;

static Ptr<aruco::DetectorParameters> detectorParams;
static Ptr<cv::aruco::Dictionary> dictionary;
static raspicam::RaspiCam_Cv Camera;

ServiceRoverMarkerDetect::ServiceRoverMarkerDetect() {
  AFB_NOTICE("[ServiceRoverMarkerDetect] Constructor ");
}

int ServiceRoverMarkerDetect::init() {
  AFB_NOTICE("[ServiceRoverMarkerDetect] Init ");

  detectorParams = aruco::DetectorParameters::create();
  dictionary = cv::aruco::getPredefinedDictionary(cv::aruco::DICT_6X6_250);

  Camera.set( CV_CAP_PROP_FORMAT, CV_8UC1 );
  if (!Camera.open()) {
    return -1;
  }

  return 0;
}


/** Autogenrated doc for detect_marker */
int ServiceRoverMarkerDetect::detect_marker(int &out_marker_id) {
  AFB_NOTICE("[ServiceRoverMarkerDetect] Detect_marker");
  Mat inputImage;
  vector<int> markerIds;
  vector<vector<Point2f>> markerCorners;

  Camera.grab();
  Camera.retrieve(inputImage);

  aruco::detectMarkers(inputImage,
                         dictionary,
                         markerCorners,
                         markerIds,
                         detectorParams);

  if (markerIds.size() >= 1) {
    out_marker_id = markerIds[0];
  } else {
    out_marker_id = 0;
  }

  return 0;
}
