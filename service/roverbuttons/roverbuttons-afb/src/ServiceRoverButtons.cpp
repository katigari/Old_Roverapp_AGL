/* Copyright 2018 Pedro Cuadra - pjcuadra@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* WARNING: This file is automatically generated by raml2agl */
#include <service/ServiceRoverButtons.h>
#include <roverapi/rover_button.hpp>
#include <roverapi/rover_api.hpp>

static const int maxButtons = 3;

using namespace rover;

static RoverBase base;


inline bool check_id(const rover_button_id id) {
  switch (id) {
    case user_button:
    case shutdown_button:
    case custom_button:
      return true;
    default:
      return false;
  }
}

static RoverButton buttons[maxButtons] = {
  RoverButton(static_cast<const RoverButtonType_t>(0)),
  RoverButton(static_cast<const RoverButtonType_t>(1)),
  RoverButton(static_cast<const RoverButtonType_t>(2))
};

ServiceRoverButtons::ServiceRoverButtons() {
  AFB_DEBUG("[ServiceRoverButtons] Constructor ");
}

int ServiceRoverButtons::init() {
  AFB_DEBUG("[ServiceRoverButtons] Init ");

  base.initialize();

  for (int i = 0; i < maxButtons; i++) {
    buttons[i].initialize();
  }

  return 0;
}


/** Autogenrated doc for read */
int ServiceRoverButtons::read(const rover_button_id in_button_id,
    double &out_button_state) {
  AFB_DEBUG("[ServiceRoverButtons] Read");
  int id = static_cast<int>(in_button_id);

  if (!check_id(in_button_id)) {
    return -1;
  }

  out_button_state = buttons[id].readButton();

  return 0;
}
